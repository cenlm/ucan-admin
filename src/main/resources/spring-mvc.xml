<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-4.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
http://www.springframework.org/schema/mvc 
http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">


	<!-- 启动对@AspectJ注解的支持 -->
	<!-- <aop:aspectj-autoproxy /> -->
	<!-- <context:component-scan base-package="com.cen.spring"> </context:component-scan> -->
	<!-- <context:annotation-config/> -->
	<!-- 开启注解 -->

	<context:component-scan base-package="com.ucan.controller">
	</context:component-scan>

	<!-- JSP视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- springMVC默认的消息转换器 -->
	<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 开启spring mvc注解驱动 -->
	<mvc:annotation-driven />
	<mvc:resources location="/js/" mapping="/js/**" cache-period="22320" />
	<mvc:resources location="/css/" mapping="/css/**" cache-period="22320" />
	<mvc:resources location="/imgs/" mapping="/imgs/**" cache-period="22320" />
	<mvc:resources location="/fonts/" mapping="/fonts/**" cache-period="22320" />
	<mvc:resources location="/logs/" mapping="/logs/**" cache-period="22320" />

	<!-- <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/**" /> <mvc:exclude-mapping path="/login/**" /> <bean class="com.cen.spring.interceptor.MyHandlerInterceptor" 
		/> </mvc:interceptor> </mvc:interceptors> -->

	<!-- 启用shiro注解：通过AuthorizationAttributeSourceAdvisor的matches方法来判断目标对象的 某个方法是否被shiro注解标注，如果是，则该类要创建CGLIB代理对象 -->
	<!-- 重要：如果在Controller中使用@RequiresPermissions等shiro注解，一定要在spring-mvc.xml中声明，否则代理创建失败 -->
	<!-- 因为Spring AOP自动代理主要通过AbstractAdvisorAutoProxyCreator和AbstractAutoProxyCreator这两个抽象类进行实现且只在当前上下文有效，而抽象类自身不能进行实例化，只能通过子类来进行实例化，他们实现 SmartInstantiationAwareBeanPostProcessor 
		接口 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />

</beans>
